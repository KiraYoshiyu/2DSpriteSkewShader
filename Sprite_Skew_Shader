Shader "2DSpriteShader/Sprite_Skew"
{
    Properties
    {
        [PerRendererData] _MainTex ("Sprite Texture", 2D) = "white" {}
        _Color ("Tint", Color) = (1,1,1,1)
        [MaterialToggle] PixelSnap ("Pixel snap", Float) = 0
        
        [Enum(Off,14,On,15)]
		_ColorMask("ColorMask", Int) =15

        _h ("Horizontal Skew", Float) = 0
        _v ("Vertical Skew", Float) = 0
        _x ("X_Scale Skew", Float) = 0
        _y ("Y_Scale Skew", Float) = 0

    }
    SubShader
    {
        Tags
        { 
            "Queue"="Transparent" 
            "IgnoreProjector"="True" 
            "RenderType"="Transparent" 
            "PreviewType"="Plane"
            "CanUseSpriteAtlas"="True"
        }
        Cull Off
        Lighting Off
        ZWrite Off
        Fog { Mode Off }
        Blend One OneMinusSrcAlpha
		ColorMask [_ColorMask]
        Pass
        {
        CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #pragma multi_compile DUMMY PIXELSNAP_ON
            #include "UnityCG.cginc"
            
            struct appdata_t
            {
                float4 vertex   : POSITION;
                float4 color    : COLOR;
                float2 texcoord : TEXCOORD0;
            };
            struct v2f
            {
                float4 vertex   : SV_POSITION;
                fixed4 color    : COLOR;
                half2 texcoord  : TEXCOORD0;
            };
            
            sampler2D _MainTex;
            fixed4 _Color;
            float _h;
            float _v;
            float _x;
            float _y;

            v2f vert(appdata_t IN)
            {
                v2f OUT;
                OUT.texcoord = IN.texcoord;
                OUT.color = IN.color * _Color;
                
                // Create a skew transformation matrix

                float4x4 transformMatrix = float4x4(
                    _x, _h, 0, 0,    //x: 比例,偏斜,0,位置
                    _v, _y, 0, 0,    //y: 偏斜,比例,0,位置
                    0 ,  0, 1, 0,
                    0 ,  0, 0, 1 );
                
                float4 skewedVertex = mul(transformMatrix, IN.vertex);
                OUT.vertex = UnityObjectToClipPos(skewedVertex);
                
                #ifdef PIXELSNAP_ON
                OUT.vertex = UnityPixelSnap (OUT.vertex);
                #endif
                return OUT;
            }
            fixed4 frag(v2f IN) : SV_Target
            {
                fixed4 c = tex2D(_MainTex, IN.texcoord) * IN.color;
                c.rgb *= c.a;
                return c;
            }
        ENDCG
        }
    }
}

Show the result:
![screenshot](https://im6.ezgif.com/tmp/ezgif-6-cb38c1b17ad7.gif)
